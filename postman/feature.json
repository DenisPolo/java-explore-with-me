{
  "info": {
    "_postman_id": "0e12350c-91d3-4a62-a653-a04953eb3054",
    "name": "Test Explore With Me - Feature Location",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26473591"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "User Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"ivan.petrov@email.ru\"').to.eql('ivan.petrov@email.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Иван Петров\"').to.eql('Иван Петров');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"ivan.petrov@email.ru\",\r\n  \"name\": \"Иван Петров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Category Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has category create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test category 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test category 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Sport\"').to.eql('Sport');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"name\": \"Sport\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "Event 1 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-01 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": -35.7632,\r\n    \"lon\": -99.602\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 2 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-02 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": -35.8661,\r\n    \"lon\": -98.9133\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 3 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-03 06:00:00\"').to.eql('2025-01-03 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-03 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": -36.6552,\r\n    \"lon\": -99.4183\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 4 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-04 06:00:00\"').to.eql('2025-01-04 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-04 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": -36.5037,\r\n    \"lon\": -98.9095\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 5 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-05 06:00:00\"').to.eql('2025-01-05 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-05 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": -35.5745,\r\n    \"lon\": -97.9296\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 6 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-06 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 63.9444,\r\n    \"lon\": 106.7255\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 7 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 7').to.eql(7);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-07 06:00:00\"').to.eql('2025-01-07 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-07 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 63.6815,\r\n    \"lon\": 106.5418\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 8 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 8').to.eql(8);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-08 06:00:00\"').to.eql('2025-01-08 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-08 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 63.8218,\r\n    \"lon\": 107.043\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 9 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-09 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 63.3612,\r\n    \"lon\": 106.7151\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 10 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 10').to.eql(10);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-10 06:00:00\"').to.eql('2025-01-10 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-10 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 63.4594,\r\n    \"lon\": 107.052\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 11 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 11').to.eql(11);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-11 06:00:00\"').to.eql('2025-01-11 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-11 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 64.1835,\r\n    \"lon\": 106.1016\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 12 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 12').to.eql(12);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-12 06:00:00\"').to.eql('2025-01-12 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-12 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 62.6445,\r\n    \"lon\": 107.285\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 13 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 13').to.eql(13);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-13 06:00:00\"').to.eql('2025-01-13 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-13 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 60.8239,\r\n    \"lon\": -146.0023\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 14 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 14').to.eql(14);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-14 06:00:00\"').to.eql('2025-01-14 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-14 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": 47.8306,\r\n    \"lon\": 70.9237\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 15 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 15').to.eql(15);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-15 06:00:00\"').to.eql('2025-01-15 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"annotation\": \"Утренняя пробежка вдоль набережной\",\r\n  \"category\": 1,\r\n  \"description\": \"Бег позволит Вам взбодриться и получить прилив сил на весь день! Присоединяйся!\",\r\n  \"eventDate\": \"2025-01-15 06:00:00\",\r\n  \"location\": {\r\n    \"lat\": -53.1222,\r\n    \"lon\": 146.1304\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 0,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Пробежка 10 километров\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 1 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "1"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 2 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "2"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 6 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/6",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "6"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 9 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/9",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "9"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 12 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 12').to.eql(12);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-12 06:00:00\"').to.eql('2025-01-12 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/12",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "12"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 14 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 14').to.eql(14);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-14 06:00:00\"').to.eql('2025-01-14 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/14",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "14"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Event 15 Publish",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has event create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test event 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 15').to.eql(15);\r",
                  "});\r",
                  "pm.test(\"Test event 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('title');\r",
                  "    pm.expect(jsonData.title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData.eventDate, '\"eventDate\" must be \"2025-01-15 06:00:00\"').to.eql('2025-01-15 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event 'state' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('state');\r",
                  "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/15",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "15"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Main Locations",
      "item": [
        {
          "name": "Main Location Create - Fail Name Not Present Copy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": -36.2323,\r\n\t\"lon\": -99.2684,\r\n\t\"rad\": 94472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail description size less than 20",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go!\",\r\n\t\"lat\": -36.2323,\r\n\t\"lon\": -99.2684,\r\n\t\"rad\": 94472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail latitude greater than 90°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": 91.2323,\r\n\t\"lon\": -99.2684,\r\n\t\"rad\": 94472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail longitude greater than 180°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": -36.2323,\r\n\t\"lon\": 181.2684,\r\n\t\"rad\": 94472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail radius greater than 10000m",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": -36.2323,\r\n\t\"lon\": -99.2684,\r\n\t\"rad\": 100472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location 1 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has main location create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test main location 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lat');\r",
                  "    pm.expect(jsonData.lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lon');\r",
                  "    pm.expect(jsonData.lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('rad');\r",
                  "    pm.expect(jsonData.rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Description about Location 1\",\r\n\t\"lat\": -36.2323,\r\n\t\"lon\": -99.2684,\r\n\t\"rad\": 94472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail Name size greater than 50",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"This location is so far away! You'll never be able to reach her! Do not even try!\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": 63.6346,\r\n\t\"lon\": 106.8326,\r\n\t\"rad\": 55572\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail description size greater than 7000",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! This location is so far away! You'll never be able to reach her! Do not even try!This location is so far away! You'll never be able to reach her! Do not even try! \",\r\n\t\"lat\": 63.6346,\r\n\t\"lon\": 106.8326,\r\n\t\"rad\": 55572\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail latitude less than 90°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": -91.2323,\r\n\t\"lon\": 106.8326,\r\n\t\"rad\": 55572\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail longitude less than 180°",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": 63.6346,\r\n\t\"lon\": -181.2684,\r\n\t\"rad\": 55572\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location Create - Fail radius less than 0m",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Jast go there and relax!\",\r\n\t\"lat\": 63.6346,\r\n\t\"lon\": 106.8326,\r\n\t\"rad\": -1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Main Location 2 Create",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(201);\r",
                  "});\r",
                  "pm.test(\"Has main location create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test main location 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lat');\r",
                  "    pm.expect(jsonData.lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lon');\r",
                  "    pm.expect(jsonData.lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('rad');\r",
                  "    pm.expect(jsonData.rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 2\",\r\n\t\"description\": \"Description about Location 2\",\r\n\t\"lat\": 63.6346,\r\n\t\"lon\": 106.8326,\r\n\t\"rad\": 55572\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Get Main Locations",
      "item": [
        {
          "name": "Admin Get Main Locations All",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list main locations response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[0].lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[0].lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[0].rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[1].lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[1].lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[1].rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Main Locations ids=2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list main locations response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[0].lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[0].lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[0].rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations?ids=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "2"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Main Location 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has main location create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test main location 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lat');\r",
                  "    pm.expect(jsonData.lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lon');\r",
                  "    pm.expect(jsonData.lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('rad');\r",
                  "    pm.expect(jsonData.rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "1"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Get Events In Locations",
      "item": [
        {
          "name": "Admin Get Events In Location 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('title');\r",
                  "    pm.expect(jsonData[2].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[2].eventDate, '\"eventDate\" must be \"2025-01-03 06:00:00\"').to.eql('2025-01-03 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('title');\r",
                  "    pm.expect(jsonData[3].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[3].eventDate, '\"eventDate\" must be \"2025-01-04 06:00:00\"').to.eql('2025-01-04 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/location/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "location",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "1"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Events In Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 7').to.eql(7);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-07 06:00:00\"').to.eql('2025-01-07 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 8').to.eql(8);\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('title');\r",
                  "    pm.expect(jsonData[2].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[2].eventDate, '\"eventDate\" must be \"2025-01-08 06:00:00\"').to.eql('2025-01-08 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('title');\r",
                  "    pm.expect(jsonData[3].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[3].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('id');\r",
                  "    pm.expect(jsonData[4].id, '\"id\" must be 10').to.eql(10);\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('title');\r",
                  "    pm.expect(jsonData[4].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[4].eventDate, '\"eventDate\" must be \"2025-01-10 06:00:00\"').to.eql('2025-01-10 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/location?lat=63.6346&lon=106.8326&rad=55572",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                "location"
              ],
              "query": [
                {
                  "key": "lat",
                  "value": "63.6346"
                },
                {
                  "key": "lon",
                  "value": "106.8326"
                },
                {
                  "key": "rad",
                  "value": "55572"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Events Filter In Location 1 And Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('title');\r",
                  "    pm.expect(jsonData[2].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[2].eventDate, '\"eventDate\" must be \"2025-01-03 06:00:00\"').to.eql('2025-01-03 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('title');\r",
                  "    pm.expect(jsonData[3].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[3].eventDate, '\"eventDate\" must be \"2025-01-04 06:00:00\"').to.eql('2025-01-04 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('id');\r",
                  "    pm.expect(jsonData[4].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('title');\r",
                  "    pm.expect(jsonData[4].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[4].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[5] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[5]).to.have.property('id');\r",
                  "    pm.expect(jsonData[5].id, '\"id\" must be 7').to.eql(7);\r",
                  "});\r",
                  "pm.test(\"Test event[5] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[5]).to.have.property('title');\r",
                  "    pm.expect(jsonData[5].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[5] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[5]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[5].eventDate, '\"eventDate\" must be \"2025-01-07 06:00:00\"').to.eql('2025-01-07 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[6] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[6]).to.have.property('id');\r",
                  "    pm.expect(jsonData[6].id, '\"id\" must be 8').to.eql(8);\r",
                  "});\r",
                  "pm.test(\"Test event[6] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[6]).to.have.property('title');\r",
                  "    pm.expect(jsonData[6].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[6] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[6]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[6].eventDate, '\"eventDate\" must be \"2025-01-08 06:00:00\"').to.eql('2025-01-08 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[7] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[7]).to.have.property('id');\r",
                  "    pm.expect(jsonData[7].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[7] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[7]).to.have.property('title');\r",
                  "    pm.expect(jsonData[7].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[7] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[7]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[7].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[8] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[8]).to.have.property('id');\r",
                  "    pm.expect(jsonData[8].id, '\"id\" must be 10').to.eql(10);\r",
                  "});\r",
                  "pm.test(\"Test event[8] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[8]).to.have.property('title');\r",
                  "    pm.expect(jsonData[8].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[8] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[8]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[8].eventDate, '\"eventDate\" must be \"2025-01-10 06:00:00\"').to.eql('2025-01-10 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events?locations=1&lat=63.6346&lon=106.8326&rad=55572",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "locations",
                  "value": "1"
                },
                {
                  "key": "lat",
                  "value": "63.6346"
                },
                {
                  "key": "lon",
                  "value": "106.8326"
                },
                {
                  "key": "rad",
                  "value": "55572"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Events Filter In Location 2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 7').to.eql(7);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-07 06:00:00\"').to.eql('2025-01-07 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 8').to.eql(8);\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('title');\r",
                  "    pm.expect(jsonData[2].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[2].eventDate, '\"eventDate\" must be \"2025-01-08 06:00:00\"').to.eql('2025-01-08 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('title');\r",
                  "    pm.expect(jsonData[3].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[3].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('id');\r",
                  "    pm.expect(jsonData[4].id, '\"id\" must be 10').to.eql(10);\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('title');\r",
                  "    pm.expect(jsonData[4].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[4] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[4].eventDate, '\"eventDate\" must be \"2025-01-10 06:00:00\"').to.eql('2025-01-10 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events?locations=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "locations",
                  "value": "2"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Events Filter In Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('title');\r",
                  "    pm.expect(jsonData[2].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[2].eventDate, '\"eventDate\" must be \"2025-01-03 06:00:00\"').to.eql('2025-01-03 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('title');\r",
                  "    pm.expect(jsonData[3].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[3].eventDate, '\"eventDate\" must be \"2025-01-04 06:00:00\"').to.eql('2025-01-04 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events?lat=-36.2323&lon=-99.2684&rad=94472.4",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "lat",
                  "value": "-36.2323"
                },
                {
                  "key": "lon",
                  "value": "-99.2684"
                },
                {
                  "key": "rad",
                  "value": "94472.4"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Get Main Locations",
      "item": [
        {
          "name": "User 1 Get Main Locations All",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list main locations response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[0].lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[0].lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[0].rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[1].lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[1].lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[1].rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "User 1 Get Main Locations ids=2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list main locations response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[0].lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[0].lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[0].rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/locations?ids=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "locations"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "2"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "User 1 Get Main Location 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has main location create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test main location 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lat');\r",
                  "    pm.expect(jsonData.lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lon');\r",
                  "    pm.expect(jsonData.lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('rad');\r",
                  "    pm.expect(jsonData.rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/locations/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "locations",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "1"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Get Events In Locations",
      "item": [
        {
          "name": "User 1 Get Events In Location 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events/location/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events",
                "location",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "1"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "User 1 Get Events In Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/events/location?lat=63.6346&lon=106.8326&rad=55572",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "1",
                "events",
                "location"
              ],
              "query": [
                {
                  "key": "lat",
                  "value": "63.6346"
                },
                {
                  "key": "lon",
                  "value": "106.8326"
                },
                {
                  "key": "rad",
                  "value": "55572"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Public Get Main Locations",
      "item": [
        {
          "name": "Public Get Main Locations All",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list main locations response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[0].lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[0].lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[0].rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[1].lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[1].lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location[1] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[1].rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "locations"
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Public Get Main Locations ids=2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list main locations response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Location 2\"').to.eql('Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Description about Location 2\"').to.eql('Description about Location 2');\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lat');\r",
                  "    pm.expect(jsonData[0].lat, '\"lat\" must be \"-36.2323\"').to.eql(63.6346);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('lon');\r",
                  "    pm.expect(jsonData[0].lon, '\"lon\" must be \"-99.2684\"').to.eql(106.8326);\r",
                  "});\r",
                  "pm.test(\"Test main location[0] 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('rad');\r",
                  "    pm.expect(jsonData[0].rad, '\"rad\" must be \"94472.4\"').to.eql(55572);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/locations?ids=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "locations"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "2"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Public Get Main Location 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Has main location create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test main location 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test main location 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Description about Location 1\"').to.eql('Description about Location 1');\r",
                  "});\r",
                  "pm.test(\"Test main location 'lat' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lat');\r",
                  "    pm.expect(jsonData.lat, '\"lat\" must be \"-36.2323\"').to.eql(-36.2323);\r",
                  "});\r",
                  "pm.test(\"Test main location 'lon' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('lon');\r",
                  "    pm.expect(jsonData.lon, '\"lon\" must be \"-99.2684\"').to.eql(-99.2684);\r",
                  "});\r",
                  "pm.test(\"Test main location 'rad' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('rad');\r",
                  "    pm.expect(jsonData.rad, '\"rad\" must be \"94472.4\"').to.eql(94472.4);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/locations/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "locations",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "1"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Public Get Events In Locations",
      "item": [
        {
          "name": "Public Get Events In Location 1",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/location/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "location",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "1"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Public Get Events In Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events/location?lat=63.6346&lon=106.8326&rad=55572",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "location"
              ],
              "query": [
                {
                  "key": "lat",
                  "value": "63.6346"
                },
                {
                  "key": "lon",
                  "value": "106.8326"
                },
                {
                  "key": "rad",
                  "value": "55572"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Public Get Events Filter In Location 1 And Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('title');\r",
                  "    pm.expect(jsonData[2].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[2] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[2].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('title');\r",
                  "    pm.expect(jsonData[3].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[3] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[3].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events?locations=1&lat=63.6346&lon=106.8326&rad=55572",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "locations",
                  "value": "1"
                },
                {
                  "key": "lat",
                  "value": "63.6346"
                },
                {
                  "key": "lon",
                  "value": "106.8326"
                },
                {
                  "key": "rad",
                  "value": "55572"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Public Get Events Filter In Location 2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 9').to.eql(9);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-09 06:00:00\"').to.eql('2025-01-09 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-06 06:00:00\"').to.eql('2025-01-06 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events?locations=2",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "locations",
                  "value": "2"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Get Events Filter In Coordinates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(200);\r",
                  "});\r",
                  "pm.test(\"Test list events response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('title');\r",
                  "    pm.expect(jsonData[0].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[0] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[0].eventDate, '\"eventDate\" must be \"2025-01-02 06:00:00\"').to.eql('2025-01-02 06:00:00');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'title' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('title');\r",
                  "    pm.expect(jsonData[1].title, '\"title\" must be \"Пробежка 10 километров\"').to.eql('Пробежка 10 километров');\r",
                  "});\r",
                  "pm.test(\"Test event[1] 'eventDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('eventDate');\r",
                  "    pm.expect(jsonData[1].eventDate, '\"eventDate\" must be \"2025-01-01 06:00:00\"').to.eql('2025-01-01 06:00:00');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/events?lat=-36.2323&lon=-99.2684&rad=94472.4",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "lat",
                  "value": "-36.2323"
                },
                {
                  "key": "lon",
                  "value": "-99.2684"
                },
                {
                  "key": "rad",
                  "value": "94472.4"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Delete Main Location",
      "item": [
        {
          "name": "Admin Delete Main Location - Faild not foud",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.equals(400);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "3"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        },
        {
          "name": "Admin Delete Main Location 2",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.equals(204);\r",
                  "})\r",
                  "pm.test(\"Has main location deleted correct\", function () {\r",
                  "   pm.response.to.have.header(\"X-Deleted-User-Info\");\r",
                  "   pm.response.to.be.header(\"X-Deleted-User-Info\", \"Location with ID: 2 successfully deleted\");\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Location 1\",\r\n\t\"description\": \"Description about Location 1\",\r\n\t\"lat\": -36.2323,\r\n\t\"lon\": -99.2684,\r\n\t\"rad\": 94472.4\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations/:locationId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations",
                ":locationId"
              ],
              "variable": [
                {
                  "key": "locationId",
                  "value": "2"
                }
              ]
            },
            "description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": " http://localhost:8080"
    }
  ]
}